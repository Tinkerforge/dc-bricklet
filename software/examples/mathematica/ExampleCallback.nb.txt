Needs["NETLink`"]
LoadNETAssembly["Tinkerforge",NotebookDirectory[]<>"../../.."]

host="localhost"
port=4223
uid="XYZ"(*Change XYZ to the UID of your Performance DC Bricklet*)

(*Create IPConnection and device object*)
ipcon=NETNew["Tinkerforge.IPConnection"]
pdc=NETNew["Tinkerforge.BrickletPerformanceDC",uid,ipcon]
ipcon@Connect[host,port]

(*Use velocity reached callback to swing back and forth*)
(*between full speed forward and full speed backward*)
VelocityReachedCB[sender_,velocity_]:=
 Module[{},
  If[velocity==32767,
   Print["Velocity: Full speed forward, now turning backward"];
   sender@SetVelocity[-32767]
  ];
  If[velocity==-32767,
   Print["Velocity: Full speed backward, now turning forward"];
   sender@SetVelocity[32767]
  ]
 ]

AddEventHandler[pdc@VelocityReachedCallback,VelocityReachedCB]

(*Enable velocity reached callback*)
pdc@SetVelocityReachedCallbackConfiguration[True]

(*The acceleration has to be smaller or equal to the maximum*)
(*acceleration of the DC motor, otherwise the velocity reached*)
(*callback will be called too early*)
pdc@SetMotion[4096,4096](*Slow acceleration (12.5 %/s)*)
pdc@SetVelocity[32767](*Full speed forward (100 %)*)

(*Enable motor power*)
pdc@SetEnabled[True]

Input["Click OK to exit"]

(*Stop motor before disabling motor power*)
pdc@SetMotion[4096,16384](*Fast decceleration (50 %/s) for stopping*)
pdc@SetVelocity[0](*Request motor stop*)
Pause[2](*Wait for motor to actually stop: velocity (100 %) / decceleration (50 %/s) = 2 s*)
pdc@SetEnabled[False](*Disable motor power*)

ipcon@Disconnect[]
ReleaseNETObject[pdc]
ReleaseNETObject[ipcon]
